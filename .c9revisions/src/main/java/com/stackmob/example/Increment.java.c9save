{"ts":1365073840161,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"package com.stackmob.example;\n/**\n * Copyright 2013 StackMob\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport com.stackmob.core.customcode.CustomCodeMethod;\nimport com.stackmob.core.rest.ProcessedAPIRequest;\nimport com.stackmob.core.rest.ResponseToProcess;\nimport com.stackmob.sdkapi.SDKServiceProvider;\nimport com.stackmob.sdkapi.*;\n\nimport com.stackmob.core.InvalidSchemaException;\nimport com.stackmob.core.DatastoreException;\nimport com.stackmob.sdkapi.LoggerService;\nimport com.stackmob.example.Util;\n\nimport java.lang.Integer;\nimport java.lang.String;\nimport java.net.HttpURLConnection;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ArrayList;\n\npublic class Increment implements CustomCodeMethod {\n\n  @Override\n  public String getMethodName() {\n    return \"increment\";\n  }\n\n  @Override\n  public List<String> getParams() {\n    return Arrays.asList(\"number\");\n  }\n\n  @Override\n  public ResponseToProcess execute(ProcessedAPIRequest request, SDKServiceProvider serviceProvider) {\n    int responseCode = 0;\n    String responseBody = \"\";\n    int intNumber = 0;\n\n    LoggerService logger = serviceProvider.getLoggerService(Increment.class);  //Log to the StackMob Custom Code Console\n\n    String strNumber = request.getParams().get(\"number\");\n\n    if ( Util.strCheck(strNumber) ) {\n      HashMap<String, String> errParams = new HashMap<String, String>();\n      errParams.put(\"error\", \"the number passed was null or empty.\");\n      return new ResponseToProcess(HttpURLConnection.HTTP_BAD_REQUEST, errParams); // http 400 - bad request\n    }\n\n    try {\n      intNumber = Integer.parseInt(strNumber);\n    } catch (NumberFormatException e) {\n      HashMap<String, String> errParams = new HashMap<String, String>();\n      errParams.put(\"error\", \"number format exception\");\n      return new ResponseToProcess(HttpURLConnection.HTTP_BAD_REQUEST, errParams); // http 400 - bad request\n    }\n\n    DataService dataService = serviceProvider.getDataService();   // get the StackMob datastore service and assemble the query\n\n    try {\n      List<SMUpdate> update = new ArrayList<SMUpdate>();\n      update.add(new SMIncrement(\"num_likes\", intNumber));\n      SMObject incrementResult = dataService.updateObject(\"todo\", \"todo1\", update); // todo schema with todo_id = todo1\n      responseBody = incrementResult.toString();\n    } catch (InvalidSchemaException e) {\n      HashMap<String, String> errMap = new HashMap<String, String>();\n      errMap.put(\"error\", \"invalid_schema\");\n      errMap.put(\"detail\", e.toString());\n      return new ResponseToProcess(HttpURLConnection.HTTP_INTERNAL_ERROR, errMap); // http 500 - internal server error\n    } catch (DatastoreException e) {\n      HashMap<String, String> errMap = new HashMap<String, String>();\n      errMap.put(\"error\", \"datastore_exception\");\n      errMap.put(\"detail\", e.toString());\n      return new ResponseToProcess(HttpURLConnection.HTTP_INTERNAL_ERROR, errMap); // http 500 - internal server error\n    } catch(Exception e) {\n      HashMap<String, String> errMap = new HashMap<String, String>();\n      errMap.put(\"error\", \"unknown\");\n      errMap.put(\"detail\", e.toString());\n      return new ResponseToProcess(HttpURLConnection.HTTP_INTERNAL_ERROR, errMap); // http 500 - internal server error\n    }\n\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"response_body\", responseBody);\n\n    return new ResponseToProcess(responseCode, map);\n  }\n}"]],"start1":0,"start2":0,"length1":0,"length2":3992}]],"length":3992}
