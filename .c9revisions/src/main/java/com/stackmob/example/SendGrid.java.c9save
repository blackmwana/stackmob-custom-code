{"ts":1365812266432,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Copyright 2012-2013 StackMob\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.stackmob.example;\n\nimport com.stackmob.core.customcode.CustomCodeMethod;\nimport com.stackmob.core.rest.ProcessedAPIRequest;\nimport com.stackmob.core.rest.ResponseToProcess;\nimport com.stackmob.sdkapi.SDKServiceProvider;\nimport com.stackmob.sdkapi.*;\n\nimport com.stackmob.sdkapi.http.HttpService;\nimport com.stackmob.sdkapi.http.request.HttpRequest;\nimport com.stackmob.sdkapi.http.request.GetRequest;\nimport com.stackmob.sdkapi.http.response.HttpResponse;\nimport com.stackmob.core.ServiceNotActivatedException;\nimport com.stackmob.sdkapi.http.exceptions.AccessDeniedException;\nimport com.stackmob.sdkapi.http.exceptions.TimeoutException;\nimport com.stackmob.core.InvalidSchemaException;\nimport com.stackmob.core.DatastoreException;\n\nimport java.net.MalformedURLException;\nimport com.stackmob.sdkapi.http.request.PostRequest;\nimport com.stackmob.sdkapi.http.Header;\nimport com.stackmob.sdkapi.LoggerService;\n\nimport java.net.HttpURLConnection;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\n\n// Added JSON parsing to handle JSON posted in the body\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.net.URLEncoder;\nimport java.io.UnsupportedEncodingException;\n\npublic class SendGrid implements CustomCodeMethod {\n\n  //Create your SendGrid Acct at sendgrid.com\n  static String API_USER = \"YOUR_SENDGRID_USERNAME\";\n  static String API_KEY = \"YOUR_SENDGRID_PASSWORD\";\n\n  @Override\n  public String getMethodName() {\n    return \"sendgrid_email\";\n  }\n    \n    \n  @Override\n  public List<String> getParams() {\n    return Arrays.asList();\n  }  \n    \n\n  @Override\n  public ResponseToProcess execute(ProcessedAPIRequest request, SDKServiceProvider serviceProvider) {\n    int responseCode = 0;\n    String responseBody = \"\";\n    String username = \"\";\n    String subject = \"\";\n    String text = \"\";\n    String from = \"\";\n    String to = \"\";\n    String toname = \"\";\n    String body = \"\";\n    String url = \"\";\n    \n    LoggerService logger = serviceProvider.getLoggerService(SendGrid.class);\n    //Log the JSON object passed to the StackMob Logs\n    logger.debug(request.getBody());\n    \n    JSONParser parser = new JSONParser();\n    try {\n      Object obj = parser.parse(request.getBody());\n      JSONObject jsonObject = (JSONObject) obj;\n\n      //We use the username passed to query the StackMob datastore\n      //and retrieve the user's name and email address\n      username = (String) jsonObject.get(\"username\");\n\n      // The following values could be static or dynamic\n      subject = (String) jsonObject.get(\"subject\");\n      text = (String) jsonObject.get(\"text\");\n      from = (String) jsonObject.get(\"from\");\n    } catch (ParseException e) {\n      logger.error(e.getMessage(), e);\n      responseCode = -1;\n      responseBody = e.getMessage();\n    }\n\t\n    if (username == null || username.isEmpty()) {\n      HashMap<String, String> errParams = new HashMap<String, String>();\n      errParams.put(\"error\", \"the username passed was empty or null\");\n      return new ResponseToProcess(HttpURLConnection.HTTP_BAD_REQUEST, errParams); // http 400 - bad request\n    }\n    \t\n    // get the StackMob datastore service and assemble the query\n    DataService dataService = serviceProvider.getDataService();\n    \t \n    // build a query\n    List<SMCondition> query = new ArrayList<SMCondition>();\n    query.add(new SMEquals(\"username\", new SMString(username)));\n\n    SMObject userObject;\n    List<SMObject> result;\n    try {\n      // return results from user query\n      result = dataService.readObjects(\"user\", query);\n      if (result != null && result.size() == 1) {\n        userObject = result.get(0);\n        to = userObject.getValue().get(\"email\").toString();\n        toname = userObject.getValue().get(\"name\").toString();\n      } else {\n        HashMap<String, String> errMap = new HashMap<String, String>();\n        errMap.put(\"error\", \"no user found\");\n        errMap.put(\"detail\", \"no matches for the username passed\");\n        return new ResponseToProcess(HttpURLConnection.HTTP_OK, errMap); // http 500 - internal server error\n      }\n      \n    } catch (InvalidSchemaException e) {\n      HashMap<String, String> errMap = new HashMap<String, String>();\n      errMap.put(\"error\", \"invalid_schema\");\n      errMap.put(\"detail\", e.toString());\n      return new ResponseToProcess(HttpURLConnection.HTTP_INTERNAL_ERROR, errMap); // http 500 - internal server error\n    } catch (DatastoreException e) {\n      HashMap<String, String> errMap = new HashMap<String, String>();\n      errMap.put(\"error\", \"datastore_exception\");\n      errMap.put(\"detail\", e.toString());\n      return new ResponseToProcess(HttpURLConnection.HTTP_INTERNAL_ERROR, errMap); // http 500 - internal server error\n    } catch(Exception e) {\n      HashMap<String, String> errMap = new HashMap<String, String>();\n      errMap.put(\"error\", \"unknown\");\n      errMap.put(\"detail\", e.toString());\n      return new ResponseToProcess(HttpURLConnection.HTTP_INTERNAL_ERROR, errMap); // http 500 - internal server error\n    }\n    \n    if (subject == null || subject.equals(\"\")) {\n      logger.error(\"Subject is missing\");\n    }\n\n    //Encode any parameters that need encoding (i.e. subject, toname, text)\n    try {\n      subject = URLEncoder.encode(subject, \"UTF-8\");\n      text = URLEncoder.encode(text, \"UTF-8\");\n      toname = URLEncoder.encode(toname, \"UTF-8\");\n\n    } catch (UnsupportedEncodingException e) {\n      logger.error(e.getMessage(), e);\n    }\n    \n    String queryParams = \"api_user=\" + API_USER + \"&api_key=\" + API_KEY + \"&to=\" + to + \"&toname=\" + toname + \"&subject=\" + subject + \"&text=\" + text + \"&from=\" + from;\n\n    url =  \"https://www.sendgrid.com/api/mail.send.json?\" + queryParams;\n \n    Header accept = new Header(\"Accept-Charset\", \"utf-8\");\n    Header content = new Header(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    \n    Set<Header> set = new HashSet();\n    set.add(accept);\n    set.add(content);\n\n    try {  \n      HttpService http = serviceProvider.getHttpService();\n          \n      PostRequest req = new PostRequest(url,set,body);\n\n      HttpResponse resp = http.post(req);\n      responseCode = resp.getCode();\n      responseBody = resp.getBody();\n                  \n    } catch(TimeoutException e) {\n      logger.error(e.getMessage(), e);\n      responseCode = -1;\n      responseBody = e.getMessage();\n                 \n    } catch(AccessDeniedException e) {\n      logger.error(e.getMessage(), e);\n      responseCode = -1;\n      responseBody = e.getMessage();\n              \n    } catch(MalformedURLException e) {\n      logger.error(e.getMessage(), e);\n      responseCode = -1;\n      responseBody = e.getMessage();\n           \n    } catch(ServiceNotActivatedException e) {\n      logger.error(e.getMessage(), e);\n      responseCode = -1;\n      responseBody = e.getMessage();\n    }\n\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"response_body\", responseBody);\n\n    return new ResponseToProcess(responseCode, map);\n  }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":7788}]],"length":7788}
